import numpy as np


def featureNormalize(X):
    """
        Функция позволяет вычислить нормализованную версию матрицы 
        объекты-признаки X со средним значением для каждого признака 
        равным 0 и среднеквадратическим отклонением равным 1
    """
    
    X_norm = X
    mu = np.zeros(X.shape[1])
    sigma = np.zeros(X.shape[1])
    
    # ====================== Ваш код здесь ======================
    # Инструкция: во-первых, необходимо вычислить среднее значение
    # каждого признака и вычесть его из значений соответствующих 
    # признаков в матрице X. Сохранить вектор средних в переменную mu.
    # Во-вторых, необходимо вычислить среднеквадратическое отклонение 
    # для каждого признака и разделить на него соответствующий признак 
    # с учетом нормализации на среднее значение. Сохранить вектор 
    # среднеквадратических отклонений в переменную sigma. Необходимо 
    # отметить, что X является матрицей, в которой каждый столбец 
    # является свойством, а каждая строка - объектом. Нормализацию 
    # требуется выполнить раздельно для каждого свойства

    # compute mean
    mu[0] = np.mean([X[i][0] for i in range(0, len(X))])
    mu[1] = np.mean([X[i][1] for i in range(0, len(X))])

    # compute standard deviation
    sigma[0] = np.std([X[i][0] for i in range(0, len(X))], ddof=1)
    sigma[1] = np.std([X[i][1] for i in range(0, len(X))], ddof=1)

    # normalize
    for i in range(0, len(X_norm)):
        X_norm[i][0] = (X[i][0] - mu[0]) / sigma[0]
    for i in range(0, len(X_norm)):
        X_norm[i][1] = (X[i][1] - mu[1]) / sigma[1]
    return X_norm, mu, sigma